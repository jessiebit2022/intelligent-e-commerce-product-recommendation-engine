# Intelligent E-commerce Product Recommendation Engine
# Docker Compose Configuration
# Author: Jessie Borras
# Website: jessiedev.xyz

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: recommendation_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ecommerce_recommendations
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - recommendation_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: recommendation_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - recommendation_network

  # ML Model Service (Python)
  ml-service:
    build:
      context: ./ml-model
      dockerfile: Dockerfile
    container_name: recommendation_ml_service
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - DEBUG=false
      - FLASK_ENV=production
    volumes:
      - ./ml-model/data:/app/data
      - ./ml-model/models:/app/models
    depends_on:
      - mongodb
      - redis
    networks:
      - recommendation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service (Node.js)
  api-service:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: recommendation_api
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ecommerce_recommendations?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      - ML_SERVICE_URL=http://ml-service:5000
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      - mongodb
      - redis
      - ml-service
    networks:
      - recommendation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: recommendation_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
      - REACT_APP_ML_SERVICE_URL=http://localhost:5000
    depends_on:
      - api-service
    networks:
      - recommendation_network

# Volumes
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  recommendation_network:
    driver: bridge